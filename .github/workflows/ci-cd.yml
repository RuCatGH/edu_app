name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.TEST_DB_NAME }}
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov

    - name: Run tests
      env:
        DB_NAME: ${{ secrets.TEST_DB_NAME }}
        DB_USER: ${{ secrets.TEST_DB_USER }}
        DB_USER_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: ${{ secrets.TEST_DEBUG }}
        SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        DJANGO_SETTINGS_MODULE: edu_platform.settings
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest --cov=./ --cov-report=xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Create .env file
      run: |
        echo "DB_NAME=${{ secrets.PROD_DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> .env
        echo "DB_USER_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env
        echo "DEBUG=${{ secrets.PROD_DEBUG }}" >> .env
        echo "SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}" >> .env
        echo "ALLOWED_HOSTS=${{ secrets.PROD_ALLOWED_HOSTS }}" >> .env

    - name: Build and push with docker compose
      run: |
        docker compose build
        docker tag edu_platform_web ${{ secrets.DOCKERHUB_USERNAME }}/edu-platform:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/edu-platform:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to production
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Create .env file on server
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cat > .env << 'EOL'
        DB_NAME=${{ secrets.PROD_DB_NAME }}
        DB_USER=${{ secrets.PROD_DB_USER }}
        DB_USER_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
        DEBUG=${{ secrets.PROD_DEBUG }}
        SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
        ALLOWED_HOSTS=${{ secrets.PROD_ALLOWED_HOSTS }}
        EOL"
        
        # Pull and restart containers
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker compose pull && docker compose up -d"